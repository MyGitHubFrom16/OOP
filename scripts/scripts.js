document.addEventListener("DOMContentLoaded", function(){console.log('this: ', this);});

/**
 * OOP in JavaScript
 * 
 * используется отношение «объект-объект»
 * Java: «возьми класс Car и получи там весь код, необходимый для работы нового объекта», 
 * JavaScript: «вот тебе объект, который называется прототипом; возьми из него всё, что необходимо для создания нового объекта».
 * 
 * Подход, используемый в JavaScript, называется прототипным (Prototype-based) программированием, 
 * тот, что используется в Java и подобных — классовым (class-based). 
 * Оба подхода являются отличными реализациями объектно-ориентированной парадигмы программирования, 
 * просто это два разных подхода.
 * 
 * В JavaScript функции, которые предназначены для создания объектов, 
 *  разделяющих между собой одно и то же поведение, называются конструкторами.
 */

// конструктор объекта 
function Car(brand, color){
    // поля объекта
    this.brand = brand;
    this.color = color;
    // метод объекта
    this.drive = function(){
        console.log('A ' + this.brand + ' a drive');
    }
}

var ferrari = new Car('Ferrari', 'Red');
ferrari.drive();

console.log(ferrari);
console.log(ferrari.constructor);
/**
 * Каждый созданный объект связан с конструктором. 
 * Именно это делает их принадлежащими к определённому классу, а не только то, 
 * что они создавались одной функцией, имеют однотипные имена и обладают одним поведением.
 */


/**
 * Пространство имён
 *  это контейнер, который позволяет разработчикам собрать функциональность под уникальным именем приложения. 
 *  в JavaScript — это объект, содержащий методы, свойства и другие объекты.
 *  на уровне языка в JavaScript нет разницы между пространством имён и любым другим объектом.
 */



var x = new Object('строка');
console.log(x, typeof x);
